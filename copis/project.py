# This file is part of COPISClient.
#
# COPISClient is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COPISClient is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COPISClient. If not, see <https://www.gnu.org/licenses/>.

"""COPIS Application project manager."""

import os

from importlib import import_module
from typing import Any, Iterable, List, Tuple
from itertools import groupby

import wx

from pydispatch import dispatcher
from glm import vec3

from copis import store
from copis.classes import Device, Action, Pose, MonitoredList, Object3D, OBJObject3D
from copis.models.geometries import BoundingBox, Point3, Point5
from copis.command_processor import deserialize_command
from copis.helpers import collapse_whitespaces, interleave_lists
from copis.pathutils import build_pose_sets
from copis.gui.wxutils import show_prompt_dialog

class Project():
    """A singleton that manages COPIS project operations."""

    # Note: This is the Borg design pattern which ensures that all
    # instances of this class are actually using the same set of
    # instance data.  See
    # http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66531
    __shared_state = None


    _DEFAULT_PROXY = {
        'name': 'handsome_dan.obj',
        'data':
            #region handsome dan string
            "# Blender v2.90.0 OBJ File: 'handsome_dan.blend'\n# www.blender.org\no Plane\nv -0.965840 -0.536384 3.062058\nv -1.096337 -0.784195 2.034551\nv -0.255362 -0.877508 1.978639\nv 0.096311 -0.744085 2.943292\nv 0.551413 -0.972464 1.427026\nv 0.563188 -0.733718 3.049772\nv 1.342319 -0.821777 1.449316\nv 1.091346 -0.691419 3.237577\nv 1.687667 -0.739516 2.024878\nv 1.526963 -0.515343 3.492298\nv 1.836573 -0.526173 2.311724\nv 1.899355 -0.496891 3.514694\nv 2.145854 -0.467405 2.533331\nv 2.334987 -0.593295 3.589032\nv 2.762554 -0.504363 2.739347\nv 2.893821 -0.397688 3.360264\nv 2.398401 -0.511126 2.604958\nv 2.748233 -0.558278 3.489853\nv 2.891367 -0.352221 2.702235\nv 3.082636 -0.344239 3.271955\nv -1.678441 -0.744085 3.008818\nv -1.579641 -0.816947 1.930761\nv -2.057052 -0.713616 2.847319\nv -2.152998 -0.886902 1.861230\nv 1.108388 -0.385521 3.479275\nv 1.447509 -0.329832 3.648269\nv -0.980915 -0.606017 1.731519\nv -1.366334 -0.401716 1.701548\nv 0.538437 -0.383528 1.151119\nv -0.310511 -0.606017 1.350641\nv 2.663222 -0.251624 2.592939\nv 2.425906 -0.211564 2.545886\nv -2.155667 -0.302563 1.837439\nv 0.178730 -0.278674 3.217168\nv 0.645607 -0.385521 3.323649\nv 2.391726 -0.433050 3.881333\nv 2.758514 -0.354998 3.773791\nv 1.837371 -0.286850 2.311724\nv 1.725161 -0.351919 1.704040\nv -1.528396 -0.075032 3.320455\nv 3.093595 -0.187453 3.441886\nv 2.966279 -0.166693 2.766509\nv 1.777990 -0.402590 3.812667\nv 1.287948 -0.430115 1.164682\nv 2.141400 -0.286850 2.525216\nv 2.943383 -0.293031 3.488977\nv -0.889727 -0.313948 3.372895\nv -2.152998 -0.624285 1.861230\nv -1.579641 -0.624285 1.807989\nv -2.152998 -0.624285 1.861230\nv -2.152998 -0.624285 1.861230\nv -2.152998 -0.385521 1.861230\nv -1.579641 -0.385521 1.807989\nv -2.152998 -0.624285 1.861230\nv -1.579641 -0.385521 1.807989\nv -2.197495 -0.813169 1.529602\nv -1.666999 -0.855233 1.406211\nv -2.227660 -0.425158 1.587425\nv -1.562341 -0.385521 1.464033\nv -2.179297 -0.809455 1.071094\nv -1.802224 -0.809455 0.947703\nv -2.171826 -0.448662 1.074109\nv -1.802224 -0.385521 0.947703\nv -2.339251 -0.809455 0.907402\nv -1.922388 -0.809455 0.784010\nv -2.339251 -0.450348 0.907402\nv -1.922388 -0.450348 0.784010\nv -2.421534 -0.791086 0.362360\nv -2.192648 -0.721070 0.306453\nv -2.421534 -0.450348 0.362360\nv -2.192648 -0.495982 0.306453\nv -2.413511 -0.770583 0.011860\nv -1.931534 -0.732638 0.246238\nv -2.413511 -0.476053 0.011860\nv -1.931534 -0.537233 0.246238\nv 0.694374 -0.854183 0.698117\nv 1.253093 -0.819560 0.710404\nv 0.694374 -0.462793 0.698117\nv 1.253093 -0.449409 0.710404\nv 0.779883 -0.866611 0.318078\nv 1.243655 -0.886650 0.344244\nv 0.779883 -0.499956 0.318078\nv 1.243655 -0.449409 0.344244\nv 0.753106 -0.887421 0.116013\nv 1.360325 -0.874759 0.011860\nv 0.753106 -0.469034 0.116013\nv 1.360325 -0.508201 0.011860\nv -2.152998 -0.624285 1.861230\nv -2.421534 -0.809455 0.362360\nv -2.192648 -0.809455 0.306453\nv -2.514711 -0.809455 0.011860\nv -1.940852 -0.809455 0.011860\nv 0.934333 -1.024664 1.371783\nv 0.794579 -0.768853 3.127585\nv 0.876997 -0.367222 3.401462\nv 0.921358 -0.364989 1.207249\nv 0.973734 -0.906097 0.704261\nv 0.973734 -0.438784 0.704261\nv 1.006636 -0.906097 0.286659\nv 1.006636 -0.438784 0.286659\nv 0.891946 -0.929406 0.011860\nv 0.891946 -0.481506 0.011860\nv -1.867746 -0.762056 2.928069\nv -1.866319 -0.905717 1.895995\nv -1.850312 -0.308900 1.760832\nv -1.947992 -0.143184 3.038576\nv -1.999659 -0.909579 1.467906\nv -1.895001 -0.361298 1.525729\nv -1.990761 -0.856143 1.009399\nv -1.990761 -0.361298 1.009399\nv -2.130820 -0.856143 0.845706\nv -2.130820 -0.436969 0.845706\nv -2.307091 -0.834702 0.334406\nv -2.307091 -0.436969 0.334406\nv -1.801176 -0.782294 -0.013736\nv -1.801176 -0.494652 -0.013736\nv -1.031088 -0.926707 2.548305\nv -0.079526 -0.973364 2.460965\nv 0.557300 -0.954344 2.238399\nv 1.171612 -0.954344 2.260969\nv 1.614193 -0.679372 2.615333\nv 1.867964 -0.683209 2.927436\nv 2.320507 -0.749367 2.974534\nv 2.785459 -0.535555 2.966629\nv 3.027964 -0.450642 2.946503\nv -1.629041 -0.876586 2.469790\nv -2.105025 -0.896329 2.354274\nv 2.530245 -0.718819 3.011491\nv 3.075231 -0.216869 2.971985\nv -2.222153 -0.459146 2.296454\nv 0.864456 -0.992828 2.249684\nv -1.867033 -0.929957 2.412032\nv -2.299861 -0.138653 2.745612\nv -2.369820 -0.067879 2.890640\nv -1.702804 -0.050926 3.277061\nv -2.013707 -0.105524 3.078470\nv 1.990069 -0.735052 3.608479\nv 2.186922 -0.662463 3.686574\nv 2.156622 -0.702637 3.825781\nv 1.860406 -0.756716 3.735188\nv 2.119497 -0.876232 3.228538\nv 2.230237 -0.621799 3.609755\nv 2.201522 -0.857946 3.804614\nv 2.004040 -1.050696 3.656836\nv 2.188708 -0.984162 3.196219\nv 2.217727 -0.673801 3.511294\nv 2.286567 -0.885587 3.778451\nv 2.084941 -1.193030 3.621276\nv 2.978215 -0.083346 2.824474\nv 2.998181 -0.188257 2.847843\nv 3.086544 -0.122251 3.114284\nv 3.034283 -0.105714 3.057504\nv 1.445966 -0.810841 0.261992\nv 1.445966 -0.508455 0.261992\nv 1.497452 -0.802222 0.092441\nv 1.497452 -0.534327 0.092441\nv -1.092287 0.000000 1.716205\nv -0.320909 0.000000 1.364000\nv -0.883421 0.000000 3.381477\nv 0.178730 0.000000 3.262711\nv 0.551413 0.000000 1.204279\nv 0.645607 0.000000 3.369191\nv 1.447531 0.000000 1.235349\nv 1.108388 0.000000 3.524817\nv 1.725161 0.000000 1.704040\nv 1.447509 0.000000 3.648269\nv 1.837371 0.000000 2.311724\nv 1.803809 0.000000 3.889898\nv 2.141400 0.000000 2.525216\nv 2.427401 0.000000 3.954535\nv 2.652439 0.000000 2.629378\nv 2.917384 0.000000 3.551690\nv 2.992409 0.000000 2.849203\nv 3.089779 0.000000 3.450811\nv -1.579641 0.000000 1.743990\nv -1.549518 0.000000 3.341164\nv -2.130447 0.000000 1.899998\nv 2.425906 0.000000 2.545886\nv 2.733860 0.000000 3.827597\nv -0.965840 0.536384 3.062058\nv -1.096337 0.784195 2.034551\nv -0.255362 0.877508 1.978639\nv 0.096311 0.744085 2.943292\nv 0.551413 0.972464 1.427026\nv 0.563188 0.733718 3.049772\nv 1.342319 0.821777 1.449316\nv 1.091346 0.691419 3.237577\nv 1.687667 0.739516 2.024878\nv 1.526963 0.515343 3.492298\nv 1.836573 0.526173 2.311724\nv 1.899355 0.496891 3.514694\nv 2.145854 0.467405 2.533331\nv 2.334987 0.593295 3.589032\nv 2.762554 0.504363 2.739347\nv 2.893821 0.397688 3.360264\nv 2.398401 0.511126 2.604958\nv 2.748233 0.558278 3.489853\nv 2.891367 0.352221 2.702235\nv 3.082636 0.344239 3.271955\nv -1.678441 0.744085 3.008818\nv -1.579641 0.816947 1.930761\nv -2.057052 0.713616 2.847319\nv -2.152998 0.886902 1.861230\nv 1.108388 0.385521 3.479275\nv 1.447509 0.329832 3.648269\nv -0.980915 0.606017 1.731519\nv -1.366334 0.401716 1.701548\nv 0.538437 0.383528 1.151119\nv -0.310511 0.606017 1.350641\nv 2.663222 0.251624 2.592939\nv 2.425906 0.211564 2.545886\nv -2.155667 0.302563 1.837439\nv 0.178730 0.278674 3.217168\nv 0.645607 0.385521 3.323649\nv 2.391726 0.433050 3.881333\nv 2.758514 0.354998 3.773791\nv 1.837371 0.286850 2.311724\nv 1.725161 0.351919 1.704040\nv -1.528396 0.075032 3.320455\nv 3.093595 0.187453 3.441886\nv 2.966279 0.166693 2.766509\nv 1.777990 0.402590 3.812667\nv 1.287948 0.430115 1.164682\nv 2.141400 0.286850 2.525216\nv 2.943383 0.293031 3.488977\nv -0.889727 0.313948 3.372895\nv -2.152998 0.624285 1.861230\nv -1.579641 0.624285 1.807989\nv -2.152998 0.624285 1.861230\nv -2.152998 0.624285 1.861230\nv -2.152998 0.385521 1.861230\nv -1.579641 0.385521 1.807989\nv -2.152998 0.624285 1.861230\nv -1.579641 0.385521 1.807989\nv -2.197495 0.813169 1.529602\nv -1.666999 0.855233 1.406211\nv -2.227660 0.425158 1.587425\nv -1.562341 0.385521 1.464033\nv -2.179297 0.809455 1.071094\nv -1.802224 0.809455 0.947703\nv -2.171826 0.448662 1.074109\nv -1.802224 0.385521 0.947703\nv -2.339251 0.809455 0.907402\nv -1.922388 0.809455 0.784010\nv -2.339251 0.450348 0.907402\nv -1.922388 0.450348 0.784010\nv -2.421534 0.791086 0.362360\nv -2.192648 0.721070 0.306453\nv -2.421534 0.450348 0.362360\nv -2.192648 0.495982 0.306453\nv -2.413511 0.770583 0.011860\nv -1.931534 0.732638 0.246238\nv -2.413511 0.476053 0.011860\nv -1.931534 0.537233 0.246238\nv 0.694374 0.854183 0.698117\nv 1.253093 0.819560 0.710404\nv 0.694374 0.462793 0.698117\nv 1.253093 0.449409 0.710404\nv 0.779883 0.866611 0.318078\nv 1.243655 0.886650 0.344244\nv 0.779883 0.499956 0.318078\nv 1.243655 0.449409 0.344244\nv 0.753106 0.887421 0.116013\nv 1.360325 0.874759 0.011860\nv 0.753106 0.469034 0.116013\nv 1.360325 0.508201 0.011860\nv -2.152998 0.624285 1.861230\nv -2.421534 0.809455 0.362360\nv -2.192648 0.809455 0.306453\nv -2.514711 0.809455 0.011860\nv -1.940852 0.809455 0.011860\nv 0.934333 0.000000 1.210422\nv 0.876997 0.000000 3.447004\nv 0.934333 1.024664 1.371783\nv 0.794579 0.768853 3.127585\nv 0.876997 0.367222 3.401462\nv 0.921358 0.364989 1.207249\nv 0.973734 0.906097 0.704261\nv 0.973734 0.438784 0.704261\nv 1.006636 0.906097 0.286659\nv 1.006636 0.438784 0.286659\nv 0.891946 0.929406 0.011860\nv 0.891946 0.481506 0.011860\nv -2.053953 0.000000 3.178360\nv -1.910338 0.000000 1.788937\nv -1.867746 0.762056 2.928069\nv -1.866319 0.905717 1.895995\nv -1.850312 0.308900 1.760832\nv -1.947992 0.143184 3.038576\nv -1.999659 0.909579 1.467906\nv -1.895001 0.361298 1.525729\nv -1.990761 0.856143 1.009399\nv -1.990761 0.361298 1.009399\nv -2.130820 0.856143 0.845706\nv -2.130820 0.436969 0.845706\nv -2.307091 0.834702 0.334406\nv -2.307091 0.436969 0.334406\nv -1.801176 0.782294 -0.013736\nv -1.801176 0.494652 -0.013736\nv 3.079631 0.000000 3.147651\nv -2.233835 0.000000 2.308350\nv -1.031088 0.926707 2.548305\nv -0.079526 0.973364 2.460965\nv 0.557300 0.954344 2.238399\nv 1.171612 0.954344 2.260969\nv 1.614193 0.679372 2.615333\nv 1.867964 0.683209 2.927436\nv 2.320507 0.749367 2.974534\nv 2.785459 0.535555 2.966629\nv 3.027964 0.450642 2.946503\nv -1.629041 0.876586 2.469790\nv -2.105025 0.896329 2.354274\nv 2.530245 0.718819 3.011491\nv 3.075231 0.216869 2.971985\nv -2.222153 0.459146 2.296454\nv 0.864456 0.992828 2.249684\nv -1.867033 0.929957 2.412032\nv -2.299345 0.000000 2.761302\nv -2.299861 0.138653 2.745612\nv -2.395826 0.000000 2.878287\nv -2.369820 0.067879 2.890640\nv -1.702804 0.050926 3.277061\nv -1.690554 0.000000 3.355630\nv -2.013707 0.105524 3.078470\nv 1.990069 0.735052 3.608479\nv 2.186922 0.662463 3.686574\nv 2.156622 0.702637 3.825781\nv 1.860406 0.756716 3.735188\nv 2.119497 0.876232 3.228538\nv 2.230237 0.621799 3.609755\nv 2.201522 0.857946 3.804614\nv 2.004040 1.050696 3.656836\nv 2.188708 0.984162 3.196219\nv 2.217727 0.673801 3.511294\nv 2.286567 0.885587 3.778451\nv 2.084941 1.193030 3.621276\nv 2.978215 0.083346 2.824474\nv 2.998181 0.188257 2.847843\nv 3.048970 0.000000 3.103732\nv 3.086544 0.122251 3.114284\nv 3.034283 0.105714 3.057504\nv 1.445966 0.810841 0.261992\nv 1.445966 0.508455 0.261992\nv 1.497452 0.802222 0.092441\nv 1.497452 0.534327 0.092441\nvt 0.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.025536\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 0.500000\nvt 0.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 0.500000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 1.000000\nvt 1.000000 0.500000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 0.500000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 1.000000\nvt 0.000000 0.000000\nvt 0.000000 1.000000\nvt 1.000000 0.250000\nvt 1.000000 0.250000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.250000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.500000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 0.500000\nvt 1.000000 0.025536\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.500000\nvt 0.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 0.500000\nvt 0.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 1.000000\nvt 0.000000 0.000000\nvt 1.000000 0.500000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 0.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.500000\nvt 0.000000 1.000000\nvt 0.000000 1.000000\nvt 0.000000 0.500000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 0.000000\nvt 0.000000 1.000000\nvt 1.000000 0.250000\nvt 1.000000 0.250000\nvt 0.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 1.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvt 1.000000 0.000000\nvn -0.0515 -0.8424 0.5364\nvn -0.0785 -0.9957 -0.0488\nvn 0.3210 -0.9470 -0.0108\nvn 0.3923 -0.9196 0.0208\nvn 0.5190 -0.8533 -0.0504\nvn 0.1331 -0.9058 -0.4022\nvn 0.3212 -0.8576 -0.4017\nvn 0.4567 -0.8062 -0.3761\nvn 0.0630 -0.8942 0.4431\nvn -0.2793 -0.9029 0.3268\nvn 0.0991 -0.8457 -0.5243\nvn -0.2187 -0.6305 0.7448\nvn -0.2441 -0.7115 -0.6589\nvn 0.2592 -0.3070 -0.9157\nvn -0.2411 -0.5079 0.8270\nvn 0.2518 -0.8315 0.4953\nvn 0.9585 -0.1740 -0.2256\nvn -0.5715 -0.1606 0.8048\nvn 0.9911 -0.1118 -0.0719\nvn -0.1879 -0.8711 0.4538\nvn 0.9941 0.0322 -0.1038\nvn 0.2375 -0.4153 -0.8781\nvn -0.1807 -0.8810 -0.4372\nvn 0.1758 -0.1447 -0.9737\nvn -0.2888 -0.5225 0.8022\nvn 0.5233 -0.6909 0.4988\nvn 0.5793 -0.0107 -0.8151\nvn 0.7666 -0.5630 0.3089\nvn 0.0446 -0.6530 0.7561\nvn 0.1772 -0.5438 -0.8203\nvn 0.7847 -0.3696 -0.4976\nvn -0.0775 -0.5575 0.8266\nvn -0.0849 -0.0780 0.9933\nvn 0.8145 -0.1148 -0.5687\nvn -0.1097 -0.1683 0.9796\nvn 0.1287 -0.0916 0.9874\nvn 0.8370 -0.0328 0.5463\nvn 0.5747 0.0000 -0.8184\nvn 0.4428 -0.1053 0.8904\nvn -0.3126 -0.1141 0.9430\nvn 0.0725 0.0000 -0.9974\nvn -0.4527 -0.0469 -0.8904\nvn 0.5012 0.2178 -0.8375\nvn -0.0129 0.0952 -0.9954\nvn -0.1209 0.0519 -0.9913\nvn -0.5132 -0.0721 0.8552\nvn 0.9996 0.0075 -0.0267\nvn -0.2761 -0.9037 0.3273\nvn 0.9834 0.0000 -0.1816\nvn 0.3409 -0.1542 0.9274\nvn -0.2348 -0.1321 0.9630\nvn -0.9819 0.0356 -0.1859\nvn 0.2765 0.0818 -0.9575\nvn -0.2120 0.0661 -0.9750\nvn 0.0095 0.0300 -0.9995\nvn -0.3912 -0.0585 0.9184\nvn 0.8727 -0.3743 -0.3136\nvn 0.0860 0.9959 -0.0279\nvn 0.8061 0.0000 -0.5918\nvn -0.9969 -0.0241 -0.0754\nvn 0.9285 -0.0854 -0.3613\nvn -0.3657 -0.9282 -0.0687\nvn 0.8703 0.0000 -0.4925\nvn -0.1777 -0.9705 0.1628\nvn -0.0287 0.9266 -0.3748\nvn -0.7104 0.0044 0.7038\nvn 0.3227 0.8587 0.3981\nvn -0.2621 -0.9646 0.0278\nvn 0.1831 0.9748 -0.1277\nvn -0.9888 0.0000 0.1493\nvn 0.8939 0.0000 0.4482\nvn -0.9997 0.0000 -0.0229\nvn 0.2247 0.0000 0.9744\nvn -0.0870 -0.9822 -0.1665\nvn -0.1782 -0.9839 -0.0111\nvn -0.1660 -0.9684 -0.1859\nvn -0.9655 -0.0823 -0.2469\nvn 0.1107 0.9894 -0.0942\nvn 0.0655 0.9842 -0.1643\nvn 0.0410 0.9992 0.0012\nvn -0.9756 0.0000 -0.2195\nvn 0.9997 0.0000 -0.0258\nvn 0.0000 0.0000 -1.0000\nvn -0.9913 0.0000 0.1314\nvn -0.1658 -0.9762 0.1395\nvn -0.0156 -0.6628 -0.7486\nvn -0.9920 -0.1195 -0.0401\nvn 0.1207 0.9832 -0.1368\nvn -0.9791 -0.0400 0.1995\nvn -0.2331 -0.9718 -0.0348\nvn 0.1029 -0.9945 0.0190\nvn -0.6001 0.0000 -0.7999\nvn -0.1690 0.9831 -0.0709\nvn -0.1272 0.9918 0.0132\nvn -0.0475 0.9846 -0.1680\nvn 0.3960 -0.9136 -0.0925\nvn 0.1897 -0.9778 0.0894\nvn 0.0791 0.0721 -0.9943\nvn -0.3207 -0.1138 0.9403\nvn -0.2234 -0.5533 0.8024\nvn -0.1287 -0.9914 0.0244\nvn 0.2248 -0.9744 -0.0090\nvn -0.1506 0.9410 -0.3032\nvn 0.3371 -0.7589 0.5572\nvn -0.0418 0.0000 -0.9991\nvn -0.0774 0.9968 0.0189\nvn 0.3687 -0.8909 -0.2654\nvn -0.0017 0.9928 -0.1197\nvn -0.2489 0.9685 0.0049\nvn 0.1834 -0.9722 -0.1458\nvn 0.1595 -0.9789 -0.1279\nvn -0.2848 0.9585 -0.0108\nvn -0.3326 0.1198 -0.9354\nvn -0.4686 -0.2521 0.8467\nvn 0.0705 -0.9585 0.2763\nvn 0.2714 -0.9604 -0.0635\nvn -0.1710 -0.9544 0.2447\nvn -0.8518 -0.0968 -0.5149\nvn 0.7320 0.5639 -0.3824\nvn 0.8534 -0.1200 -0.5073\nvn 0.1261 -0.9597 0.2512\nvn -0.0944 -0.9951 -0.0288\nvn 0.0161 -0.9819 -0.1888\nvn 0.3491 -0.9085 0.2295\nvn 0.6545 -0.7559 0.0137\nvn -0.2094 -0.9383 0.2753\nvn -0.0992 -0.9686 0.2280\nvn 0.3067 -0.9211 0.2399\nvn 0.1310 -0.9562 0.2617\nvn 0.0589 -0.9454 0.3205\nvn -0.0928 -0.9732 -0.2104\nvn -0.5033 -0.5349 0.6787\nvn -0.2787 -0.7434 0.6080\nvn -0.1185 -0.6198 0.7758\nvn -0.9882 -0.0114 -0.1528\nvn -0.9399 -0.3126 0.1373\nvn -0.2173 -0.8142 0.5384\nvn -0.8499 -0.2610 -0.4577\nvn -0.1658 -0.1667 0.9720\nvn 0.6635 -0.7303 0.1626\nvn 0.8581 0.3109 0.4087\nvn -0.8952 -0.1059 -0.4328\nvn -0.3998 0.8517 -0.3387\nvn -0.2787 -0.3177 0.9063\nvn -0.8323 -0.3933 -0.3905\nvn 0.4273 0.6583 -0.6197\nvn -0.1234 -0.4429 0.8880\nvn 0.8863 0.3686 0.2803\nvn 0.9562 -0.2689 -0.1152\nvn 0.4696 0.1137 -0.8755\nvn 0.9597 0.1268 -0.2508\nvn 0.9718 -0.0631 -0.2274\nvn 0.7733 0.1853 -0.6063\nvn 0.2422 0.9668 -0.0819\nvn 0.5066 0.0000 -0.8622\nvn 0.3990 -0.9119 0.0964\nvn 0.3766 0.0000 0.9264\nvn 0.9569 0.0000 0.2906\nvn -0.0515 0.8424 0.5364\nvn -0.0785 0.9957 -0.0488\nvn 0.3210 0.9470 -0.0108\nvn 0.3923 0.9196 0.0208\nvn 0.5190 0.8533 -0.0504\nvn 0.1331 0.9058 -0.4022\nvn 0.3212 0.8576 -0.4017\nvn 0.4567 0.8062 -0.3761\nvn 0.0630 0.8942 0.4431\nvn -0.2793 0.9029 0.3268\nvn 0.0991 0.8457 -0.5243\nvn -0.2187 0.6305 0.7448\nvn -0.2441 0.7115 -0.6589\nvn 0.2593 0.3070 -0.9157\nvn -0.2411 0.5079 0.8270\nvn 0.2518 0.8315 0.4953\nvn 0.9585 0.1740 -0.2256\nvn -0.5715 0.1606 0.8048\nvn 0.9911 0.1118 -0.0719\nvn -0.1879 0.8711 0.4538\nvn 0.9941 -0.0322 -0.1038\nvn 0.2375 0.4153 -0.8781\nvn -0.1807 0.8810 -0.4372\nvn 0.1758 0.1447 -0.9737\nvn -0.2888 0.5225 0.8022\nvn 0.5233 0.6909 0.4988\nvn 0.5793 0.0107 -0.8151\nvn 0.7666 0.5630 0.3089\nvn 0.0446 0.6530 0.7561\nvn 0.1772 0.5438 -0.8203\nvn 0.7847 0.3696 -0.4976\nvn -0.0775 0.5575 0.8266\nvn -0.0849 0.0780 0.9933\nvn 0.8145 0.1148 -0.5687\nvn -0.1097 0.1683 0.9796\nvn 0.1287 0.0916 0.9874\nvn 0.8370 0.0328 0.5463\nvn 0.4428 0.1053 0.8904\nvn -0.3126 0.1141 0.9430\nvn -0.4527 0.0469 -0.8904\nvn 0.5012 -0.2178 -0.8375\nvn -0.0129 -0.0952 -0.9954\nvn -0.1209 -0.0519 -0.9913\nvn -0.5132 0.0721 0.8552\nvn 0.9996 -0.0075 -0.0267\nvn -0.2761 0.9037 0.3273\nvn 0.3409 0.1542 0.9274\nvn -0.2348 0.1321 0.9630\nvn -0.9819 -0.0356 -0.1859\nvn 0.2765 -0.0818 -0.9575\nvn -0.2120 -0.0661 -0.9750\nvn 0.0095 -0.0300 -0.9995\nvn -0.3912 0.0585 0.9184\nvn 0.8727 0.3743 -0.3136\nvn 0.0860 -0.9959 -0.0279\nvn -0.9969 0.0241 -0.0754\nvn 0.9285 0.0854 -0.3613\nvn -0.3657 0.9282 -0.0687\nvn -0.1777 0.9705 0.1628\nvn -0.0287 -0.9266 -0.3748\nvn -0.7104 -0.0044 0.7038\nvn 0.3227 -0.8587 0.3981\nvn -0.2621 0.9646 0.0278\nvn 0.1831 -0.9748 -0.1277\nvn -0.0870 0.9822 -0.1665\nvn -0.1782 0.9839 -0.0111\nvn -0.1660 0.9684 -0.1859\nvn -0.9655 0.0823 -0.2469\nvn 0.1107 -0.9894 -0.0942\nvn 0.0655 -0.9842 -0.1643\nvn 0.0410 -0.9992 0.0012\nvn -0.1658 0.9762 0.1395\nvn -0.0156 0.6628 -0.7486\nvn -0.9920 0.1195 -0.0401\nvn 0.1207 -0.9832 -0.1368\nvn -0.9791 0.0400 0.1995\nvn -0.2331 0.9718 -0.0348\nvn 0.1029 0.9945 0.0190\nvn -0.1690 -0.9831 -0.0709\nvn -0.1272 -0.9918 0.0132\nvn -0.0475 -0.9846 -0.1680\nvn 0.3960 0.9136 -0.0925\nvn 0.1897 0.9778 0.0894\nvn 0.0791 -0.0721 -0.9943\nvn -0.3207 0.1138 0.9403\nvn -0.2234 0.5533 0.8024\nvn -0.1287 0.9914 0.0244\nvn 0.2248 0.9744 -0.0090\nvn -0.1506 -0.9410 -0.3032\nvn 0.3371 0.7589 0.5572\nvn -0.0774 -0.9968 0.0189\nvn 0.3687 0.8909 -0.2654\nvn -0.0017 -0.9928 -0.1197\nvn -0.2489 -0.9685 0.0049\nvn 0.1834 0.9722 -0.1458\nvn 0.1595 0.9789 -0.1279\nvn -0.2848 -0.9585 -0.0108\nvn -0.3326 -0.1198 -0.9354\nvn -0.4686 0.2521 0.8467\nvn 0.0705 0.9585 0.2763\nvn 0.2714 0.9604 -0.0635\nvn -0.1710 0.9544 0.2447\nvn -0.8518 0.0968 -0.5149\nvn 0.7320 -0.5639 -0.3824\nvn 0.8534 0.1200 -0.5073\nvn 0.1261 0.9597 0.2512\nvn -0.0944 0.9951 -0.0288\nvn 0.0161 0.9819 -0.1888\nvn 0.3491 0.9085 0.2295\nvn 0.6545 0.7559 0.0137\nvn -0.2094 0.9383 0.2753\nvn -0.0992 0.9686 0.2280\nvn 0.3067 0.9211 0.2399\nvn 0.1310 0.9562 0.2617\nvn 0.0589 0.9454 0.3205\nvn -0.0928 0.9732 -0.2104\nvn -0.5033 0.5349 0.6787\nvn -0.2787 0.7434 0.6080\nvn -0.1185 0.6198 0.7758\nvn -0.9882 0.0114 -0.1528\nvn -0.9399 0.3126 0.1373\nvn -0.2173 0.8142 0.5384\nvn -0.8499 0.2610 -0.4577\nvn -0.1658 0.1667 0.9720\nvn 0.6635 0.7303 0.1626\nvn 0.8581 -0.3109 0.4087\nvn -0.8952 0.1059 -0.4328\nvn -0.3998 -0.8517 -0.3387\nvn -0.2787 0.3177 0.9063\nvn -0.8323 0.3933 -0.3905\nvn 0.4273 -0.6583 -0.6197\nvn -0.1234 0.4429 0.8880\nvn 0.8863 -0.3686 0.2803\nvn 0.9562 0.2689 -0.1152\nvn 0.4696 -0.1137 -0.8755\nvn 0.9597 -0.1268 -0.2508\nvn 0.9718 0.0631 -0.2274\nvn 0.7733 -0.1853 -0.6063\nvn 0.2422 -0.9668 -0.0819\nvn 0.3990 0.9119 0.0964\n\nf 117/1/1 118/2/1 4/3/1 1/4/1\nf 118/2/2 3/5/2 5/6/2 119/7/2\nf 131/8/3 93/9/3 7/10/3 120/11/3\nf 120/11/4 7/10/4 9/12/4 121/13/4\nf 121/13/5 9/12/5 11/14/5 122/15/5\nf 122/15/6 11/14/6 13/16/6 123/17/6\nf 128/18/7 17/19/7 15/20/7 124/21/7\nf 19/22/8 125/23/8 124/21/8 15/20/8\nf 117/1/9 1/4/9 21/24/9 126/25/9\nf 132/26/10 103/27/10 23/28/10 127/29/10\nf 123/17/11 13/16/11 17/19/11 128/18/11\nf 26/30/12 25/31/12 8/32/12 10/33/12\nf 30/34/13 29/35/13 5/6/13 3/5/13\nf 32/36/14 31/37/14 15/20/14 17/19/14\nf 35/38/15 34/39/15 4/3/15 6/40/15\nf 37/41/16 36/42/16 14/43/16 18/44/16\nf 39/45/17 38/46/17 11/14/17 9/12/17\nf 23/28/18 103/27/18 106/47/18 133/48/18\nf 129/49/19 41/50/19 20/51/19 125/23/19\nf 43/52/20 26/30/20 10/33/20 12/53/20\nf 44/54/21 7/10/21 77/55/21 79/56/21\nf 15/20/22 31/37/22 19/22/22\nf 2/57/23 27/58/23 30/34/23 3/5/23\nf 45/59/24 32/36/24 17/19/24 13/16/24\nf 95/60/25 35/38/25 6/40/25 94/61/25\nf 41/50/26 46/62/26 16/63/26 20/51/26\nf 38/46/27 45/59/27 13/16/27 11/14/27\nf 46/62/28 37/41/28 18/44/28 16/63/28\nf 34/39/29 47/64/29 1/4/29 4/3/29\nf 12/53/30 14/43/30 138/65/30 137/66/30\nf 44/54/31 39/45/31 9/12/31 7/10/31\nf 47/64/32 40/67/32 21/24/32 1/4/32\nf 159/68/33 176/69/33 40/67/33 47/64/33\nf 163/70/34 165/71/34 39/45/34 44/54/34\nf 170/72/35 168/73/35 43/52/35 36/42/35\nf 160/74/36 159/68/36 47/64/36 34/39/36\nf 172/75/37 179/76/37 37/41/37 46/62/37\nf 167/77/38 169/78/38 45/59/38 38/46/38\nf 174/79/39 172/75/39 46/62/39 41/50/39\nf 273/80/40 162/81/40 35/38/40 95/60/40\nf 169/78/41 178/82/41 32/36/41 45/59/41\nf 157/83/42 158/84/42 30/34/42 27/58/42\nf 171/85/43 173/86/43 149/87/43 42/88/43 31/37/43\nf 272/89/44 163/70/44 44/54/44 96/90/44\nf 285/91/45 175/92/45 28/93/45 105/94/45\nf 168/73/46 166/95/46 26/30/46 43/52/46\nf 300/96/47 174/79/47 41/50/47 129/49/47 151/97/47\nf 106/47/48 136/98/48 134/99/48 133/48/48\nf 165/71/49 167/77/49 38/46/49 39/45/49\nf 179/76/50 170/72/50 36/42/50 37/41/50\nf 162/81/51 160/74/51 34/39/51 35/38/51\nf 301/100/52 177/101/52 33/102/52 130/103/52\nf 178/82/53 171/85/53 31/37/53 32/36/53\nf 158/84/54 161/104/54 29/35/54 30/34/54\nf 175/92/55 157/83/55 27/58/55 28/93/55\nf 166/95/56 164/105/56 25/31/56 26/30/56\nf 28/93/57 22/106/57 57/107/57 59/108/57\nf 108/109/58 59/108/58 63/110/58 110/111/58\nf 63/110/59 61/112/59 65/113/59 67/114/59\nf 56/115/60 58/116/60 62/117/60 60/118/60\nf 59/108/61 57/107/61 61/112/61 63/110/61\nf 107/119/62 56/115/62 60/118/62 109/120/62\nf 67/114/63 65/113/63 69/121/63 71/122/63\nf 109/120/64 60/118/64 64/123/64 111/124/64\nf 110/111/65 63/110/65 67/114/65 112/125/65\nf 60/118/66 62/117/66 66/126/66 64/123/66\nf 114/127/67 71/122/67 75/128/67 116/129/67\nf 111/124/68 64/123/68 68/130/68 113/131/68\nf 112/125/69 67/114/69 71/122/69 114/127/69\nf 64/123/70 66/126/70 70/132/70 68/130/70\nf 116/129/71 75/128/71 73/133/71 115/134/71\nf 68/130/72 70/132/72 74/135/72 72/136/72\nf 71/122/73 69/121/73 73/133/73 75/128/73\nf 113/131/74 68/130/74 72/136/74 115/134/74\nf 97/137/75 76/138/75 80/139/75 99/140/75\nf 93/9/76 5/6/76 76/138/76 97/137/76\nf 5/6/77 29/35/77 78/141/77 76/138/77\nf 96/90/78 44/54/78 79/56/78 98/142/78\nf 100/143/79 83/144/79 87/145/79 102/146/79\nf 98/142/80 79/56/80 83/144/80 100/143/80\nf 76/138/81 78/141/81 82/147/81 80/139/81\nf 79/56/82 77/55/82 81/148/82 83/144/82\nf 102/146/83 87/145/83 85/149/83 101/150/83\nf 80/139/84 82/147/84 86/151/84 84/152/84\nf 99/140/85 80/139/85 84/152/85 101/150/85\nf 22/106/86 28/93/86 27/58/86 2/57/86\nf 127/29/87 130/103/87 33/102/87 24/153/87\nf 105/94/88 28/93/88 59/108/88 108/109/88\nf 33/102/89 58/116/89 56/115/89 24/153/89\nf 104/154/90 24/153/90 56/115/90 107/119/90\nf 81/148/91 99/140/91 101/150/91 85/149/91\nf 86/151/92 102/146/92 101/150/92 84/152/92\nf 78/141/93 98/142/93 100/143/93 82/147/93\nf 82/147/94 100/143/94 102/146/94 86/151/94\nf 29/35/95 96/90/95 98/142/95 78/141/95\nf 7/10/96 93/9/96 97/137/96 77/55/96\nf 77/55/97 97/137/97 99/140/97 81/148/97\nf 161/104/98 272/89/98 96/90/98 29/35/98\nf 164/105/99 273/80/99 95/60/99 25/31/99\nf 25/31/100 95/60/100 94/61/100 8/32/100\nf 119/7/101 5/6/101 93/9/101 131/8/101\nf 22/106/102 104/154/102 107/119/102 57/107/102\nf 33/102/103 105/94/103 108/109/103 58/116/103\nf 69/121/104 113/131/104 115/134/104 73/133/104\nf 74/135/105 116/129/105 115/134/105 72/136/105\nf 66/126/106 112/125/106 114/127/106 70/132/106\nf 65/113/107 111/124/107 113/131/107 69/121/107\nf 70/132/108 114/127/108 116/129/108 74/135/108\nf 62/117/109 110/111/109 112/125/109 66/126/109\nf 61/112/110 109/120/110 111/124/110 65/113/110\nf 57/107/111 107/119/111 109/120/111 61/112/111\nf 58/116/112 108/109/112 110/111/112 62/117/112\nf 177/101/113 285/91/113 105/94/113 33/102/113\nf 40/67/114 106/155/114 103/27/114 21/24/114\nf 126/25/115 21/24/115 103/27/115 132/26/115\nf 22/106/116 126/25/116 132/26/116 104/154/116\nf 6/40/117 119/7/117 131/8/117 94/61/117\nf 318/156/118 133/48/118 134/99/118 320/157/118\nf 152/158/119 151/97/119 129/49/119 150/159/119\nf 42/88/120 150/159/120 129/49/120 125/23/120 19/22/120\nf 14/43/121 123/17/121 128/18/121 18/44/121\nf 104/154/122 132/26/122 127/29/122 24/153/122\nf 2/57/123 117/1/123 126/25/123 22/106/123\nf 16/63/124 124/21/124 125/23/124 20/51/124\nf 18/44/125 128/18/125 124/21/125 16/63/125\nf 12/53/126 122/15/126 123/17/126 14/43/126\nf 10/33/127 121/13/127 122/15/127 12/53/127\nf 8/32/128 120/11/128 121/13/128 10/33/128\nf 94/61/129 131/8/129 120/11/129 8/32/129\nf 4/3/130 118/2/130 119/7/130 6/40/130\nf 2/57/131 3/5/131 118/2/131 117/1/131\nf 284/160/132 320/157/132 134/99/132 136/98/132\nf 323/161/133 284/160/133 136/98/133 135/162/133\nf 176/69/134 323/161/134 135/162/134 40/67/134\nf 133/48/135 318/156/135 301/100/135 130/103/135\nf 130/103/136 127/29/136 23/28/136 133/48/136\nf 40/67/137 135/162/137 136/98/137 106/47/137\nf 43/52/138 12/53/138 137/66/138 140/163/138\nf 36/42/139 43/52/139 140/163/139 139/164/139\nf 14/43/140 36/42/140 139/164/140 138/65/140\nf 138/65/141 139/164/141 143/165/141 142/166/141\nf 140/163/142 137/66/142 141/167/142 144/168/142\nf 137/66/143 138/65/143 142/166/143 141/167/143\nf 139/164/144 140/163/144 144/168/144 143/165/144\nf 144/168/145 141/167/145 145/169/145 148/170/145\nf 141/167/146 142/166/146 146/171/146 145/169/146\nf 143/165/147 144/168/147 148/170/147 147/172/147\nf 142/166/148 143/165/148 147/172/148 146/171/148\nf 146/171/149 147/172/149 148/170/149 145/169/149\nf 42/88/150 19/22/150 31/37/150\nf 149/87/151 152/158/151 150/159/151 42/88/151\nf 173/86/152 339/173/152 152/158/152 149/87/152\nf 339/173/153 300/96/153 151/97/153 152/158/153\nf 87/145/154 83/144/154 154/174/154 156/175/154\nf 85/149/155 87/145/155 156/175/155 155/176/155\nf 81/148/156 85/149/156 155/176/156 153/177/156\nf 83/144/157 81/148/157 153/177/157 154/174/157\nf 153/177/158 155/176/158 156/175/158 154/174/158\nf 302/178/159 180/179/159 183/180/159 303/181/159\nf 303/181/160 304/182/160 184/183/160 182/184/160\nf 316/185/161 305/186/161 186/187/161 274/188/161\nf 305/186/162 306/189/162 188/190/162 186/187/162\nf 306/189/163 307/191/163 190/192/163 188/190/163\nf 307/191/164 308/193/164 192/194/164 190/192/164\nf 313/195/165 309/196/165 194/197/165 196/198/165\nf 198/199/166 194/197/166 309/196/166 310/200/166\nf 302/178/167 311/201/167 200/202/167 180/179/167\nf 317/203/168 312/204/168 202/205/168 286/206/168\nf 308/193/169 313/195/169 196/198/169 192/194/169\nf 205/207/170 189/208/170 187/209/170 204/210/170\nf 209/211/171 182/184/171 184/183/171 208/212/171\nf 211/213/172 196/198/172 194/197/172 210/214/172\nf 214/215/173 185/216/173 183/180/173 213/217/173\nf 216/218/174 197/219/174 193/220/174 215/221/174\nf 218/222/175 188/190/175 190/192/175 217/223/175\nf 202/205/176 319/224/176 289/225/176 286/206/176\nf 314/226/177 310/200/177 199/227/177 220/228/177\nf 222/229/178 191/230/178 189/208/178 205/207/178\nf 223/231/179 258/232/179 256/233/179 186/187/179\nf 194/197/180 198/199/180 210/214/180\nf 181/234/181 182/184/181 209/211/181 206/235/181\nf 224/236/182 192/194/182 196/198/182 211/213/182\nf 276/237/183 275/238/183 185/216/183 214/215/183\nf 220/228/184 199/227/184 195/239/184 225/240/184\nf 217/223/185 190/192/185 192/194/185 224/236/185\nf 225/240/186 195/239/186 197/219/186 216/218/186\nf 213/217/187 183/180/187 180/179/187 226/241/187\nf 191/230/188 325/242/188 326/243/188 193/220/188\nf 223/231/189 186/187/189 188/190/189 218/222/189\nf 226/241/190 180/179/190 200/202/190 219/244/190\nf 159/68/191 226/241/191 219/244/191 176/69/191\nf 163/70/192 223/231/192 218/222/192 165/71/192\nf 170/72/193 215/221/193 222/229/193 168/73/193\nf 160/74/194 213/217/194 226/241/194 159/68/194\nf 172/75/195 225/240/195 216/218/195 179/76/195\nf 167/77/38 217/223/38 224/236/38 169/78/38\nf 174/79/196 220/228/196 225/240/196 172/75/196\nf 273/80/197 276/237/197 214/215/197 162/81/197\nf 169/78/41 224/236/41 211/213/41 178/82/41\nf 157/83/198 206/235/198 209/211/198 158/84/198\nf 171/85/199 210/214/199 221/245/199 337/246/199 173/86/199\nf 272/89/200 277/247/200 223/231/200 163/70/200\nf 285/91/201 288/248/201 207/249/201 175/92/201\nf 168/73/202 222/229/202 205/207/202 166/95/202\nf 300/96/203 340/250/203 314/226/203 220/228/203 174/79/203\nf 289/225/204 319/224/204 321/251/204 324/252/204\nf 165/71/49 218/222/49 217/223/49 167/77/49\nf 179/76/205 216/218/205 215/221/205 170/72/205\nf 162/81/206 214/215/206 213/217/206 160/74/206\nf 301/100/207 315/253/207 212/254/207 177/101/207\nf 178/82/208 211/213/208 210/214/208 171/85/208\nf 158/84/209 209/211/209 208/212/209 161/104/209\nf 175/92/210 207/249/210 206/235/210 157/83/210\nf 166/95/211 205/207/211 204/210/211 164/105/211\nf 207/249/212 238/255/212 236/256/212 201/257/212\nf 291/258/213 293/259/213 242/260/213 238/255/213\nf 242/260/59 246/261/59 244/262/59 240/263/59\nf 235/264/214 239/265/214 241/266/214 237/267/214\nf 238/255/215 242/260/215 240/263/215 236/256/215\nf 290/268/216 292/269/216 239/265/216 235/264/216\nf 246/261/63 250/270/63 248/271/63 244/262/63\nf 292/269/217 294/272/217 243/273/217 239/265/217\nf 293/259/218 295/274/218 246/261/218 242/260/218\nf 239/265/219 243/273/219 245/275/219 241/266/219\nf 297/276/220 299/277/220 254/278/220 250/270/220\nf 294/272/221 296/279/221 247/280/221 243/273/221\nf 295/274/222 297/276/222 250/270/222 246/261/222\nf 243/273/70 247/280/70 249/281/70 245/275/70\nf 299/277/71 298/282/71 252/283/71 254/278/71\nf 247/280/72 251/284/72 253/285/72 249/281/72\nf 250/270/73 254/278/73 252/283/73 248/271/73\nf 296/279/223 298/282/223 251/284/223 247/280/223\nf 278/286/224 280/287/224 259/288/224 255/289/224\nf 274/188/225 278/286/225 255/289/225 184/183/225\nf 184/183/226 255/289/226 257/290/226 208/212/226\nf 277/247/227 279/291/227 258/232/227 223/231/227\nf 281/292/228 283/293/228 266/294/228 262/295/228\nf 279/291/229 281/292/229 262/295/229 258/232/229\nf 255/289/81 259/288/81 261/296/81 257/290/81\nf 258/232/82 262/295/82 260/297/82 256/233/82\nf 283/293/83 282/298/83 264/299/83 266/294/83\nf 259/288/84 263/300/84 265/301/84 261/296/84\nf 280/287/230 282/298/230 263/300/230 259/288/230\nf 201/257/231 181/234/231 206/235/231 207/249/231\nf 312/204/232 203/302/232 212/254/232 315/253/232\nf 288/248/233 291/258/233 238/255/233 207/249/233\nf 212/254/234 203/302/234 235/264/234 237/267/234\nf 287/303/235 290/268/235 235/264/235 203/302/235\nf 260/297/236 264/299/236 282/298/236 280/287/236\nf 265/301/92 263/300/92 282/298/92 283/293/92\nf 257/290/237 261/296/237 281/292/237 279/291/237\nf 261/296/238 265/301/238 283/293/238 281/292/238\nf 208/212/239 257/290/239 279/291/239 277/247/239\nf 186/187/240 256/233/240 278/286/240 274/188/240\nf 256/233/241 260/297/241 280/287/241 278/286/241\nf 161/104/242 208/212/242 277/247/242 272/89/242\nf 164/105/243 204/210/243 276/237/243 273/80/243\nf 204/210/244 187/209/244 275/238/244 276/237/244\nf 304/182/245 316/185/245 274/188/245 184/183/245\nf 201/257/246 236/256/246 290/268/246 287/303/246\nf 212/254/247 237/267/247 291/258/247 288/248/247\nf 248/271/248 252/283/248 298/282/248 296/279/248\nf 253/285/105 251/284/105 298/282/105 299/277/105\nf 245/275/249 249/281/249 297/276/249 295/274/249\nf 244/262/250 248/271/250 296/279/250 294/272/250\nf 249/281/251 253/285/251 299/277/251 297/276/251\nf 241/266/252 245/275/252 295/274/252 293/259/252\nf 240/263/253 244/262/253 294/272/253 292/269/253\nf 236/256/254 240/263/254 292/269/254 290/268/254\nf 237/267/255 241/266/255 293/259/255 291/258/255\nf 177/101/256 212/254/256 288/248/256 285/91/256\nf 219/244/257 200/202/257 286/206/257 289/304/257\nf 311/201/258 317/203/258 286/206/258 200/202/258\nf 201/257/259 287/303/259 317/203/259 311/201/259\nf 185/216/260 275/238/260 316/185/260 304/182/260\nf 318/156/261 320/157/261 321/251/261 319/224/261\nf 341/305/262 338/306/262 314/226/262 340/250/262\nf 221/245/263 198/199/263 310/200/263 314/226/263 338/306/263\nf 193/220/264 197/219/264 313/195/264 308/193/264\nf 287/303/265 203/302/265 312/204/265 317/203/265\nf 181/234/266 201/257/266 311/201/266 302/178/266\nf 195/239/267 199/227/267 310/200/267 309/196/267\nf 197/219/268 195/239/268 309/196/268 313/195/268\nf 191/230/269 193/220/269 308/193/269 307/191/269\nf 189/208/270 191/230/270 307/191/270 306/189/270\nf 187/209/271 189/208/271 306/189/271 305/186/271\nf 275/238/272 187/209/272 305/186/272 316/185/272\nf 183/180/273 185/216/273 304/182/273 303/181/273\nf 181/234/274 302/178/274 303/181/274 182/184/274\nf 284/160/275 324/252/275 321/251/275 320/157/275\nf 323/161/276 322/307/276 324/252/276 284/160/276\nf 176/69/277 219/244/277 322/307/277 323/161/277\nf 319/224/278 315/253/278 301/100/278 318/156/278\nf 315/253/279 319/224/279 202/205/279 312/204/279\nf 219/244/280 289/225/280 324/252/280 322/307/280\nf 222/229/281 328/308/281 325/242/281 191/230/281\nf 215/221/282 327/309/282 328/308/282 222/229/282\nf 193/220/283 326/243/283 327/309/283 215/221/283\nf 326/243/284 330/310/284 331/311/284 327/309/284\nf 328/308/285 332/312/285 329/313/285 325/242/285\nf 325/242/286 329/313/286 330/310/286 326/243/286\nf 327/309/287 331/311/287 332/312/287 328/308/287\nf 332/312/288 336/314/288 333/315/288 329/313/288\nf 329/313/289 333/315/289 334/316/289 330/310/289\nf 331/311/290 335/317/290 336/314/290 332/312/290\nf 330/310/291 334/316/291 335/317/291 331/311/291\nf 334/316/292 333/315/292 336/314/292 335/317/292\nf 221/245/293 210/214/293 198/199/293\nf 337/246/294 221/245/294 338/306/294 341/305/294\nf 173/86/295 337/246/295 341/305/295 339/173/295\nf 339/173/296 341/305/296 340/250/296 300/96/296\nf 266/294/297 345/318/297 343/319/297 262/295/297\nf 264/299/155 344/320/155 345/318/155 266/294/155\nf 260/297/298 342/321/298 344/320/298 264/299/298\nf 262/295/157 343/319/157 342/321/157 260/297/157\nf 342/321/158 343/319/158 345/318/158 344/320/158"
            #endregion
    }

    def __init__(self):
        if not Project.__shared_state:
            Project.__shared_state = self.__dict__
        else:
            self.__dict__ = Project.__shared_state

        if not hasattr(self, '_is_initialized'):
            self._is_initialized = False

        if not hasattr(self, '_profile_path'):
            self._profile_path = None

        if not hasattr(self, '_default_proxy_path'):
            self._default_proxy_path = None

        if not hasattr(self, '_path'):
            self._path = None

        if not hasattr(self, '_profile'):
            self._profile = None

        if not hasattr(self, '_is_dirty'):
            self._is_dirty = False

        if not hasattr(self, '_devices'):
            self._devices = None

        if not hasattr(self, '_proxies'):
            self._proxies = None

        if not hasattr(self, '_pose_sets'):
            self._pose_sets = None

        if not hasattr(self, '_core'):
            self._core = None

        if not hasattr(self, '_options'):
            self._options = {}

        # Bind listeners.
        dispatcher.connect(self._set_is_dirty, signal='ntf_a_list_changed')
        dispatcher.connect(self._set_is_dirty, signal='ntf_d_list_changed')
        dispatcher.connect(self._set_is_dirty, signal='ntf_o_list_changed')

    @property
    def path(self) -> str:
        """Returns the project's save path."""
        return self._path

    @property
    def devices(self) -> List[Device]:
        """Returns the list of configured devices."""
        return self._devices

    @property
    def proxies(self) -> List[Object3D]:
        """Returns the list of proxy objects."""
        return self._proxies

    @property
    def pose_sets(self) -> List[List[Pose]]:
        """Returns the pose set list."""
        return self._pose_sets

    @property
    def poses(self) ->List[Pose]:
        """Returns all poses in the pose set list."""
        p_sets = self._pose_sets

        if not p_sets:
            return []

        return[pose for p_set in p_sets for pose in p_set]

    @property
    def options(self) -> dict:
        """Returns the project's imaging options."""
        return self._options

    @property
    def is_dirty(self) -> bool:
        """Returns whether the project is dirty."""
        return self._is_dirty

    @property
    def homing_sequence(self) -> List[str]:
        """Parses and returns the profile homing sequence."""
        def is_step_valid(step: str):
            # remove comments (js, python and ini style) and empty lines.
            if step.startswith(('//', '#', ';')):
                return False
            if step is None or (step is not None and len(step.strip()) <= 0):
                return False

            return True

        key = 'homing_sequence'
        seq = []

        if key in self._profile and self._profile[key]:
            seq = list(filter(is_step_valid, self._profile[key].split('\n')))

        return seq

    @property
    def homing_actions(self) -> List[Action]:
        """Turns the homing sequence into a list of actions."""
        if not self.homing_sequence or len(self.homing_sequence) == 0:
            return []

        return [deserialize_command(cmd) for cmd in self.homing_sequence]

    def _init(self):
        self._profile_path = store.get_profile_path()
        self._default_proxy_path = store.get_proxy_path()

        self._is_initialized = True
        self._is_dirty = False

    def _set_is_dirty(self):
        self._toggle_is_dirty(True)

    def _unset_dirty_flag(self):
        self._toggle_is_dirty(False)

    def _toggle_is_dirty(self, value):
        self._is_dirty = value
        dispatcher.send('ntf_project_dirty_changed', is_project_dirty=self._is_dirty)

    def _init_devices(self):
        def parse_device(data):
            lower_corner = Point3(data['range_x'][0], data['range_y'][0], data['range_z'][0])
            upper_corner = Point3(data['range_x'][1], data['range_y'][1], data['range_z'][1])
             #if gantry style not present (as in older profiles files) we default to standard overhead gantry since all files before were overhead only
            if 'head_radius' not in data:
                data['head_radius'] = 200
            if 'body_dims' not in data:
                data['body_dims'] = [100, 40, 740]
            if 'gantry_dims' not in data:
                data['gantry_dims'] = [ 1000, 125, 100 ]
            if 'gantry_orientation' not in data:
                data['gantry_orientation'] = 1
            if 'serial_no' not in data:
                data['serial_no'] = ''
            if 'serial_no' not in data:
                data['serial_no'] = ''
            if 'edsdk_save_to_path' not in data: #eventually add global default in ini for all cams
                data['edsdk_save_to_path'] = os.path.join(store.get_root(), 'output') #for now default to program dir.
            if data['edsdk_save_to_path'] and not (data['edsdk_save_to_path']).isspace() and not os.path.exists(data['edsdk_save_to_path']):
                os.makedirs(data['edsdk_save_to_path'])
            return Device(
                data['id'],
                data['serial_no'],
                data['name'],
                data['type'],
                data['description'],
                Point5(*data['home_position']),
                BoundingBox(lower_corner, upper_corner),
                vec3(data['size']),
                data['port'],
                data['head_radius'],
                vec3(data['body_dims']),
                vec3(data['gantry_dims']),
                data['gantry_orientation'],
                data['edsdk_save_to_path']
            )

        key = 'devices'
        devices = []

        if key in self._profile and self._profile[key]:
            devices = [parse_device(d) for d in self._profile[key]]

        if self._devices is not None:               
            self._devices.clear(False)
            self._devices.extend(devices)
        else:
            self._devices: List[Device] = MonitoredList('ntf_d_list_changed', devices)

    def _init_proxies(self, proxies=None):
        if proxies is None:
            # Start with handsome dan :)
            # On init a new project is created with handsome dan as the proxy.
            handsome_dan = OBJObject3D(self._default_proxy_path, scale=vec3(20, 20, 20))
            proxies = [handsome_dan]

        if self._proxies is not None:
            self._proxies.clear(False)
            self._proxies.extend(proxies)
        else:
            self._proxies: List[Object3D] = MonitoredList('ntf_o_list_changed',
                proxies)

    def _init_pose_sets(self, sets=None):
        if self._pose_sets is not None:
            self._pose_sets.clear(sets is None)
            if sets is not None:
                self._pose_sets.extend(sets)
        else:
            if sets:
                self._pose_sets = MonitoredList('ntf_a_list_changed', sets)
            else:
                self._pose_sets = MonitoredList('ntf_a_list_changed')

    def update_imaging_option(self, name: str, value: Any) -> None:
        """Updates the value of the give option in the imaging options dictionary."""
        if name not in self._options or self._options[name] != value:
            self._options[name] = value
            self._set_is_dirty()

    def set_default_imaging_option(self, name: str, value: Any) -> None:
        """Sets the default value of the give option in the imaging options dictionary.
           Behaves like update_imaging_option except that it does not set the project as dirty."""
        if name not in self._options or self._options[name] != value:
            self._options[name] = value

    def pose_by_dev_id(self, pose_set_idx, device_id) ->Pose:
        """Returns a pose in a given pose set with device id.
           if no pose is present for that device in the pose set, None is returned."""
        if pose_set_idx < len(self._pose_sets):
            for pose in self._pose_sets[pose_set_idx]:
                if device_id == pose.position.device:
                    return pose
        return None

    def last_pose_by_dev_id(self, pose_set_idx, device_id):
        """Returns the last (highest index) pose and index accross all pose sets up to pose_set_idx for device id.
           if no pose is present for that device up to the pose set idx, None is returned.
        """
        if pose_set_idx < len(self._pose_sets):
            for i in range(pose_set_idx,-1,-1):
                for pose in self._pose_sets[i]:
                    if device_id == pose.position.device:
                        return pose
        return None

    def first_pose_by_dev_id(self, pose_set_idx, device_id):
        """Returns the first (lowest index) pose accross all pose sets up for device id, starting with pose_idx
           if no pose is present for that device, none is returned.
        """
        if pose_set_idx < len(self._pose_sets):
            for i in range(pose_set_idx, len(self._pose_sets)):
                for pose in self._pose_sets[i]:
                    if device_id == pose.position.device:
                        return pose
        return None

    def start(self) -> None:
        """Starts a new project."""
        if not self._is_initialized:
            self._init()

        self._profile = store.load_json(store.get_profile_path())
        self._init_devices()
        self._init_proxies()
        self._init_pose_sets()

        self._path = None
        self._unset_dirty_flag()

    def open(self, path: str) -> Tuple:
        """Opens an existing project given it's path."""
        if not self._is_initialized:
            self._init()

        proj_data = store.load_json(path)

        p_sets = list(map(_pose_from_json_map, proj_data['imaging_path']))
        proxies = []
        resp = None
        is_dirty = False

        for proxy in proj_data['proxies']:
            if proxy['is_path']:
                proxy_path = proxy['data']

                if not store.path_exists(proxy_path):
                    proxy_file_name = store.get_file_base_name(proxy_path)
                    def_proxy_file_name = store.get_file_base_name(self._default_proxy_path)
                    if proxy_file_name.lower() == def_proxy_file_name.lower():
                        proxy_path = self._default_proxy_path
                    else:
                        proxy_path = store.find_proxy(proxy_file_name)
                    is_dirty = True

                if proxy_path:
                    proxies.append(OBJObject3D(
                        proxy_path, scale=vec3(20, 20, 20)))
                else:
                    resp = f'Proxy path "{proxy_path or proxy["data"]}" does not exist'
            else:
                glob_key = proxy['data']['cls']
                if glob_key not in globals().keys():
                    mod = import_module(proxy['data']['module'])
                    globals()[glob_key] = getattr(mod, glob_key)

                # pylint: disable=eval-used
                proxies.append(eval(proxy['data']['repr']))

        #eventually move the UI check elsewhere
        #this is a critical check, otherwise it makes sharing paths among labs difficult.
        if self._profile != proj_data['profile']:
            choice = show_prompt_dialog('This project was made using a different machine profile, override existing?',"Profile Mismatch")
            if choice == wx.ID_YES:
                self._profile = proj_data['profile']
                self._init_devices()
        self._init_proxies(proxies)
        self._init_pose_sets(p_sets)

        if 'imaging_options' in proj_data:
            self._options = proj_data['imaging_options']

        self._path = path

        if is_dirty:
            self._set_is_dirty()
        else:
            self._unset_dirty_flag()

        return resp

    def save(self, path: str) -> None:
        """Saves the project to disk at the given path."""
        get_module = lambda i: '.'.join(i.split(".")[:2])

        proj_data = {
            'imaging_path': self._pose_sets,
            'imaging_options': self._options,
            'profile': self._profile,
            'proxies': []
        }

        for proxy in self._proxies:
            if hasattr(proxy, 'obj'):
                proxy_data = proxy.obj.file_name
                proxy_name = store.get_file_base_name_no_ext(proxy_data)
                is_path = True
            else:
                cls_name = type(proxy).__qualname__
                proxy_data = {
                    'module': get_module(type(proxy).__module__),
                    'cls': cls_name,
                    'repr': collapse_whitespaces(repr(proxy))
                }
                proxy_name = cls_name.lower().split("object")[0]
                is_path = False

                count = 1
                while any(p['name'] == proxy_name for p in proj_data['proxies']):
                    proxy_name = f'{proxy_name.split("_")[0]}_{count}'
                    count = count + 1

            p_data = {
                'name': proxy_name,
                'data': proxy_data,
                'is_path': is_path
            }

            proj_data['proxies'].append(p_data)

        store.save_json(path, proj_data)


        self._path = path
        self._unset_dirty_flag()

    def add_pose(self, set_index: int, pose: Pose) -> int:
        """Adds a pose to a pose set in the pose set list.
            Returns the index of the added pose."""
        if self.can_add_pose(set_index, pose.position.device):
            pose_set = self._pose_sets[set_index].copy()
            pose_set.append(pose)
            pose_set.sort(key=lambda p: p.position.device)

            self._pose_sets[set_index] = pose_set

            return pose_set.index(pose)
        else:
            return -1

    def insert_pose(self, set_index: int, pose: Pose) -> int:
        """Inserts a pose to a pose set in the pose set list;
            even if a pose for the camera already exists in the set.
            In which case poses are shifted down to the end of the list
            or until a set without a pose for the camera is encountered.
            Returns the index of the inserted pose."""
        if not self.can_add_pose(set_index, pose.position.device):
            free_set_indices = [i for i, set_ in enumerate(self._pose_sets) if i > set_index \
                and not any(p.position.device == pose.position.device for p in set_)]

            if free_set_indices:
                free_set_index = free_set_indices[0]
            else:
                free_set_index = len(self._pose_sets)
                self.add_pose_set()

            for i in range(free_set_index - 1, set_index - 1, -1):
                shifted = next(filter(lambda p: p.position.device == pose.position.device,
                    self._pose_sets[i]))

                self._pose_sets[i].remove(shifted)
                self._pose_sets[i + 1].append(shifted)
                self._pose_sets[i + 1].sort(key=lambda p: p.position.device)

        pose_set = self._pose_sets[set_index].copy()
        pose_set.append(pose)
        pose_set.sort(key=lambda p: p.position.device)

        self._pose_sets[set_index] = pose_set

        return pose_set.index(pose)

    def add_pose_set(self) -> int:
        """Adds an empty pose set at the end of the pose set list.
            Returns the index of the added pose set."""
        set_index = len(self._pose_sets)
        self._pose_sets.append([])

        return set_index

    def insert_pose_set(self, index) -> int:
        """Inserts an empty pose set at the give index.
            Returns the index of the inserted pose set."""
        self._pose_sets.insert(index, [])

        return index

    def delete_pose(self, set_index: int, pose_index: int):
        """Removes a pose given pose set and pose indexes."""
        pose_set = self._pose_sets[set_index].copy()
        pose_set.pop(pose_index)

        self._pose_sets[set_index] = pose_set

    def delete_pose_set(self, set_index: int):
        """Removes a pose set given its index."""
        self._pose_sets.pop(set_index)

    def move_set(self, index: int, step: int) -> int:
        """Moves a pose set up or down by step amount.
            Returns the pose set's new index."""
        new_index = index + step

        if 0 <= new_index < len(self._pose_sets):
            sets = self._pose_sets.copy()
            pose_set = sets.pop(index)
            sets.insert(new_index, pose_set)

            self._pose_sets.clear(False)
            self._pose_sets.extend(sets)

            return new_index

        return index

    def reverse_pose_sets(self):
        """Reverses the order of the pose sets."""
        self._pose_sets.reverse()

    def reverse_poses(self, device_ids: List=None):
        """Reverses the order of the poses for the given devices.
            Applies to all devices if none provided."""
        get_device = lambda a: a.position.device

        if self.poses and len(self.poses):
            sorted_poses = sorted(self.poses, key=get_device)
            grouped = groupby(sorted_poses, get_device)
            groups = []
            sets_changed = False

            for key, group in grouped:
                group = list(group)

                if not device_ids or key in device_ids:
                    group.reverse()
                    sets_changed = True

                groups.append(group)

            if sets_changed:
                interleaved = interleave_lists(*groups)
                self._pose_sets.clear(False)
                self._pose_sets.extend(build_pose_sets(interleaved))

    def can_add_pose(self, set_index: int, device_id: int):
        """Returns a flag indicating where a pose with the specified device
            can be added to the pose."""
        if not self._pose_sets or set_index >= len(self._pose_sets):
            return False

        if not self._devices or not any(d.device_id == device_id for d in self._devices):
            return False

        pose_set = self._pose_sets[set_index]

        if len(pose_set) >= len(self._devices):
            return False

        if any(p.position.device == device_id for p in pose_set):
            return False

        return True

    def get_allowed_devices(self, set_index: int):
        """Returns the devices not already in the set."""
        if not self._pose_sets or set_index >= len(self._pose_sets):
            return []

        set_dvc_ids = [p.position.device for p in self._pose_sets[set_index]]

        return [d for d in self._devices if d.device_id not in set_dvc_ids]


def _pose_from_json_map(set_data: Iterable[Any]) -> Pose:
    """Parses an iterable of JSON result dictionaries into a Pose and returns it."""
    tupleify = lambda l: list(map(tuple, l))

    p_set = []

    for pose_data in set_data:
        position = Action(**pose_data[0])
        position.args = tupleify(position.args)

        payload = [Action(**a) for a in pose_data[1]]
        for action in payload:
            action.args = tupleify(action.args)

        p_set.append(Pose(position, payload))

    return p_set
